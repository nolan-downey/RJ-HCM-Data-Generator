[{"/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/index.js":"1","/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/App.js":"2","/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/reportWebVitals.js":"3","/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/nav.js":"4","/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/frame0.js":"5","/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/frame1.js":"6","/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/frame2.js":"7","/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/Loader.jsx":"8","/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/literals.js":"9"},{"size":500,"mtime":1610735481918,"results":"10","hashOfConfig":"11"},{"size":764,"mtime":1611174916455,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1610735481918,"results":"13","hashOfConfig":"11"},{"size":132,"mtime":1611163438016,"results":"14","hashOfConfig":"11"},{"size":1453,"mtime":1611603570650,"results":"15","hashOfConfig":"11"},{"size":1240,"mtime":1611603570650,"results":"16","hashOfConfig":"11"},{"size":4496,"mtime":1611603570650,"results":"17","hashOfConfig":"11"},{"size":123,"mtime":1611603570650,"results":"18","hashOfConfig":"11"},{"size":810,"mtime":1611603570650,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rglogc",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/index.js",[],"/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/App.js",[],"/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/reportWebVitals.js",[],"/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/nav.js",[],"/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/frame0.js",[],["40","41"],"/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/frame1.js",[],"/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/frame2.js",["42","43","44","45"],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { APIURL } from './literals';\nimport Loader from './Loader';\n\nfunction Frame2({ table, previous }) {\n  const [loadedData, setLoadedData] = useState(false);\n  const [fetchingData, setFetchingData] = useState(false);\n  const [data, setData] = useState();\n\n  // Spike options state\n  const [companyName, newName] = useState(\"\");\n  const [state, newState] = useState(\"\");\n  const [city, newCity] = useState(\"\");\n  const [age, newAge] = useState(\"\");\n  const [ethnicity, newEthnicity] = useState(\"\");\n  const [gender, newGender] = useState(\"\");\n  const [workerTypes, newWorkerTypes] = useState({});\n  const [fullTimeEquivalency, newFullTimeEquivalency] = useState(\"\");\n\n  let spikeOptions = (\n    <ul className=\"spikeList\">\n      <li>Company Name<input onChange={e => newName(e.target.value)}></input></li>\n      <li>State<input onChange={e => newState(e.target.value)}></input></li>\n      <li>City<input onChange={e => newCity(e.target.value)}></input></li>\n      {/* <li>Age<input onChange={e => newAge(e.target.value)}></input></li>\n      <li>Ethnicity<input onChange={e => newEthnicity(e.target.value)}></input></li>\n      <li>Gender<input onChange={e => newGender(e.target.value)}></input></li> */}\n      <li className=\"colHeader\">Worker Type (%)\n        <ul className=\"spikeList\">\n          <li>Employee<input onChange={e => {\n            let temp = workerTypes\n            temp[\"employee\"] = e.target.value\n            newWorkerTypes(temp)\n          }}></input></li>\n          <li>Contract<input onChange={e => {\n            let temp = workerTypes\n            temp[\"contract\"] = e.target.value\n            newWorkerTypes(temp)\n          }}></input></li>              \n          <li>Temporary<input onChange={e => {\n            let temp = workerTypes\n            temp[\"temporary\"] = e.target.value\n            newWorkerTypes(temp)\n          }}></input></li>            \n        </ul>\n      </li>\n      {/* <li>Time Status<select onChange={e => newFullTimeEquivalency(e.target.value)}></select></li> */}\n    </ul>\n  )\n\n  const determineTable = (tableString) => {\n    switch(tableString) {\n      case \"Address\":\n        return \"address\";\n      case \"Person\":\n        return \"person\";\n      case \"Worker\":\n        return \"worker\";\n      case \"Job Applicant\":\n        return \"jobApplicant\";\n      case \"Job Requisition\":\n        return 'jobRequisition';\n      default:\n        return \"\";\n    }\n  }\n\n  const fetchData = async (selection) => {\n    setLoadedData(false);\n    setFetchingData(true);\n\n    // Grab spiked fields from HTML\n    let data = {\n      companyName: companyName === \"\" ? \"\" : companyName,\n      addrInfo: {state: state === \"\" ? \"\" : state, city: city === \"\" ? \"\" : city},\n      age: age === \"\" ? 0 : age,\n      ethnicity: ethnicity === \"\" ? \"\" : ethnicity,\n      gender: gender === \"\" ? \"\" : gender,\n      workerTypes: workerTypes === {} ? \"\" : workerTypes, // Employee, Temp, Contractor\n      fullTimeEquivalency: fullTimeEquivalency === \"\" ? \"\" : fullTimeEquivalency // Full Time, Part Time\n    }\n\n    // Create new DB with spiked fields\n    await axios.post(`${APIURL}/api/newDB`, data)\n    .then(res => {\n      console.log(res)\n    })\n    .catch(err => {\n      console.log(err)\n    })\n\n    selection = determineTable(selection)\n    await axios.get(`${APIURL}/api/${selection}`)\n      .then(res => {\n        if (res) {\n          setLoadedData(true);\n          setData(JSON.stringify(JSON.parse(res.data), null, 2));\n        }\n      })\n      .catch(err => {\n        setLoadedData(true);\n        setData(JSON.stringify(err));\n      })\n      .finally(() => setFetchingData(false))\n  }\n\n  return (\n    <div className=\"content\">\n      <div className=\"testingMainView\">\n        <div className=\"spikingMenu\">\n          <h1>Spiking Menu</h1>\n          {spikeOptions}\n          <div style={{positon: \"absolute\"}}>\n            <button onClick={() => fetchData(table)}>Fetch Data</button>\n          </div>\n        </div>\n        <div className=\"responseView\">\n          <h1>Sample Response</h1>\n        {\n          fetchingData ? <Loader/> \n            : loadedData ? \n                <div className=\"responseWindow\">\n                  <pre>\n                    {data}\n                  </pre>\n                </div>\n            : <div>...</div>\n        }\n        </div>\n      </div>\n      <button className=\"next-frame\" onClick={previous}>Back</button>\n    </div>\n  )\n}\n\nexport default Frame2;","/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/Loader.jsx",[],"/home/psoga/Documents/projects/RJ-HCM-Data-Generator/hcm-front-end/src/literals.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":16,"column":15,"nodeType":"52","messageId":"53","endLine":16,"endColumn":21},{"ruleId":"50","severity":1,"message":"54","line":17,"column":21,"nodeType":"52","messageId":"53","endLine":17,"endColumn":33},{"ruleId":"50","severity":1,"message":"55","line":18,"column":18,"nodeType":"52","messageId":"53","endLine":18,"endColumn":27},{"ruleId":"50","severity":1,"message":"56","line":20,"column":31,"nodeType":"52","messageId":"53","endLine":20,"endColumn":53},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'newAge' is assigned a value but never used.","Identifier","unusedVar","'newEthnicity' is assigned a value but never used.","'newGender' is assigned a value but never used.","'newFullTimeEquivalency' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]